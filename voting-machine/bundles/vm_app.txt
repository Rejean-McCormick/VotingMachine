# bundle: vm_app

--------------------------------------------------------------------------------
FILE: crates/vm_app/Cargo.toml
--------------------------------------------------------------------------------
[package]
name = "vm_app"
version = "0.1.0"
edition = "2021"
license = "Apache-2.0 OR MIT"
publish = false
description = "Desktop app wrapper (meta); backend is in src-tauri/"
# This crate should not pull the backend automatically.
# Build the app explicitly with: cargo build -p vm_app/src-tauri --locked
# Keep resolver v2 for correct feature unification across the workspace.
resolver = "2"

[features]
# Intentionally empty arrays: real behavior is implemented in src-tauri.
# These names are mirrored there; enable features on the backend crate.
default = []
frontier = []
report-html = []

# No dependencies here on purpose — prevents tauri/network deps from being pulled
# unless the backend crate is explicitly built.
[dependencies]

[profile.release]
lto = true
codegen-units = 1
panic = "abort"
strip = true

--------------------------------------------------------------------------------
FILE: crates/vm_app/src-tauri/Cargo.toml
--------------------------------------------------------------------------------
[package]
name = "vm_app_tauri"
version = "0.1.0"
edition = "2021"
license = "Apache-2.0 OR MIT"
publish = false
description = "Tauri backend for the VM Engine desktop app (offline, deterministic)."
# Use resolver v2 for correct feature unification.
resolver = "2"

# --- Binary target ---
[[bin]]
name = "vm-app"
path = "src/main.rs"

# --- Features (pass-through; backend remains offline) ---
[features]
default = []
# Enables frontier map support through downstream crates (if they gate it).
frontier = ["vm_pipeline?/frontier"]
# Enables HTML renderer in reporting.
report-html = ["vm_report?/render_html"]

# --- Dependencies (workspace-pinned for determinism) ---
[dependencies]
tauri       = { workspace = true, features = ["fs-all", "dialog-all", "shell-open"] }
serde       = { workspace = true, features = ["derive"] }
serde_json  = { workspace = true }

# Internal crates (path/workspace). Keep optional where not always needed.
vm_core     = { workspace = true }
vm_io       = { workspace = true }
vm_algo     = { workspace = true }
vm_pipeline = { workspace = true, optional = true }
vm_report   = { workspace = true, optional = true, default-features = false }

# If your workspace doesn't define these, replace `workspace = true` with pinned versions or local paths, e.g.:
# tauri = { version = "=1.5.12", features = ["fs-all","dialog-all","shell-open"] }
# vm_pipeline = { path = "../../vm_pipeline", optional = true }
# vm_report   = { path = "../../vm_report",  optional = true, default-features = false }

# --- Build dependencies ---
[build-dependencies]
tauri-build = { workspace = true }

# --- Target-specific (optional, local-only tooling) ---
[target."cfg(windows)".dependencies]
# Example: embed icons/resources locally (kept optional/off by default)
# winresource = { workspace = true, optional = true }

# --- Deterministic profiles ---
[profile.release]
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.dev]
panic = "abort"

--------------------------------------------------------------------------------
FILE: crates/vm_app/src-tauri/src/main.rs
--------------------------------------------------------------------------------
[package]
name = "vm_app_tauri"
version = "0.1.0"
edition = "2021"
license = "Apache-2.0 OR MIT"
publish = false
description = "Tauri backend for the VM Engine desktop app (offline, deterministic)."
# Use resolver v2 for correct feature unification.
resolver = "2"

# --- Binary target ---
[[bin]]
name = "vm-app"
path = "src/main.rs"

# --- Features (pass-through; backend remains offline) ---
[features]
default = []
# Enables frontier map support through downstream crates (if they gate it).
frontier = ["vm_pipeline?/frontier"]
# Enables HTML renderer in reporting.
report-html = ["vm_report?/render_html"]

# --- Dependencies (workspace-pinned for determinism) ---
[dependencies]
tauri       = { workspace = true, features = ["fs-all", "dialog-all", "shell-open"] }
serde       = { workspace = true, features = ["derive"] }
serde_json  = { workspace = true }

# Internal crates (path/workspace). Keep optional where not always needed.
vm_core     = { workspace = true }
vm_io       = { workspace = true }
vm_algo     = { workspace = true }
vm_pipeline = { workspace = true, optional = true }
vm_report   = { workspace = true, optional = true, default-features = false }

# If your workspace doesn't define these, replace `workspace = true` with pinned versions or local paths, e.g.:
# tauri = { version = "=1.5.12", features = ["fs-all","dialog-all","shell-open"] }
# vm_pipeline = { path = "../../vm_pipeline", optional = true }
# vm_report   = { path = "../../vm_report",  optional = true, default-features = false }

# --- Build dependencies ---
[build-dependencies]
tauri-build = { workspace = true }

# --- Target-specific (optional, local-only tooling) ---
[target."cfg(windows)".dependencies]
# Example: embed icons/resources locally (kept optional/off by default)
# winresource = { workspace = true, optional = true }

# --- Deterministic profiles ---
[profile.release]
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.dev]
panic = "abort"

--------------------------------------------------------------------------------
FILE: crates/vm_app/src-tauri/tauri.conf.json
--------------------------------------------------------------------------------
{
  "package": {
    "productName": "VM Engine",
    "version": "0.0.0"
  },
  "build": {
    "beforeBuildCommand": "",
    "beforeDevCommand": "",
    "distDir": "../ui/dist",
    "devPath": "../ui/dist"
  },
  "tauri": {
    "macOSPrivateApi": false,
    "bundle": {
      "active": true,
      "identifier": "org.vm.engine",
      "targets": ["dmg", "msi", "appimage", "deb"],
      "resources": [
        "../ui/dist/**",
        "../assets/**",
        "../maps/**"
      ],
      "windows": {
        "wix": { "language": "en-US" }
      }
    },
    "updater": {
      "active": false
    },
    "allowlist": {
      "all": false,
      "shell": { "all": false },
      "http": { "all": false },
      "net": { "all": false },
      "process": { "all": false },
      "notification": { "all": false },
      "globalShortcut": { "all": false },
      "os": { "all": false },
      "path": { "all": false },
      "dialog": {
        "open": true,
        "save": true
      },
      "fs": {
        "all": false,
        "readFile": true,
        "writeFile": true,
        "createDir": true,
        "exists": true,
        "scope": [
          "$APP/**",
          "$RESOURCE/**",
          "$APPDATA/**",
          "$HOME/Documents/VM/**"
        ]
      },
      "window": {
        "all": false,
        "setTitle": true,
        "show": true,
        "hide": true,
        "close": true
      },
      "event": { "all": true },
      "clipboard": { "all": false }
    },
    "security": {
      "csp": "default-src 'self'; img-src 'self' data: blob:; media-src 'self' data: blob:; style-src 'self' 'unsafe-inline'; font-src 'self' data:; script-src 'self'; connect-src 'none'; frame-src 'none'; object-src 'none'"
    },
    "windows": [
      {
        "title": "VM Engine",
        "width": 1200,
        "height": 800,
        "resizable": true,
        "fullscreen": false,
        "visible": true,
        "center": true
      }
    ]
  }
}

--------------------------------------------------------------------------------
FILE: crates/vm_app/ui/package.json
--------------------------------------------------------------------------------
{
  "name": "vm-ui",
  "version": "0.1.0",
  "private": true,
  "description": "Deterministic, offline UI bundle for the VM Engine app",
  "license": "Apache-2.0 OR MIT",
  "type": "module",
  "packageManager": "npm@10.8.1",
  "engines": {
    "node": ">=18.18 <23",
    "npm": ">=9"
  },
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview --strictPort --port 4173",
    "lint": "eslint \"src/**/*.{ts,tsx,js,jsx}\" && stylelint \"src/**/*.{css,scss}\"",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "maplibre-gl": "3.6.2"
  },
  "devDependencies": {
    "@types/node": "20.14.10",
    "@typescript-eslint/eslint-plugin": "7.16.1",
    "@typescript-eslint/parser": "7.16.1",
    "autoprefixer": "10.4.19",
    "eslint": "8.57.0",
    "postcss": "8.4.41",
    "stylelint": "16.6.1",
    "stylelint-config-standard": "36.0.1",
    "typescript": "5.5.4",
    "vite": "5.4.2"
  },
  "browserslist": [
    "chrome >= 110",
    "edge >= 110",
    "safari >= 16",
    "ios_saf >= 16"
  ],
  "sideEffects": false
}

--------------------------------------------------------------------------------
FILE: crates/vm_app/ui/index.html
--------------------------------------------------------------------------------
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta
      http-equiv="Content-Security-Policy"
      content="
        default-src 'self' asset: tauri: ipc:;
        img-src 'self' asset: data: blob:;
        style-src 'self' 'unsafe-inline';
        font-src 'self' asset: data:;
        script-src 'self';
        connect-src 'self' asset: tauri: ipc:;
        object-src 'none';
        frame-ancestors 'none';
      ">
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
    <meta name="color-scheme" content="light dark">
    <title>VM Engine — Report Viewer</title>
    <!-- Local, bundled stylesheet (no external fonts or CDNs) -->
    <link rel="stylesheet" href="./assets/app.css">
  </head>
  <body>
    <noscript>
      This application requires JavaScript (offline, no network). Please enable it to view reports.
    </noscript>
    <!-- App root -->
    <div id="app" role="main" aria-live="polite">
      <!-- Section anchors in Doc 7 order; content injected by bundled JS from artifacts -->
      <section id="sec-cover-snapshot" data-section="cover_snapshot" aria-labelledby="h-cover">
        <h1 id="h-cover" class="visually-hidden">Cover & Snapshot</h1>
      </section>
      <section id="sec-eligibility" data-section="eligibility" aria-labelledby="h-eligibility">
        <h2 id="h-eligibility" class="visually-hidden">Eligibility & Rolls</h2>
      </section>
      <section id="sec-ballot" data-section="ballot" aria-labelledby="h-ballot">
        <h2 id="h-ballot" class="visually-hidden">Ballot Method</h2>
      </section>
      <section id="sec-allocation" data-section="allocation" aria-labelledby="h-allocation">
        <h2 id="h-allocation" class="visually-hidden">Allocation & Aggregation</h2>
      </section>
      <section id="sec-legitimacy" data-section="legitimacy_panel" aria-labelledby="h-legitimacy">
        <h2 id="h-legitimacy" class="visually-hidden">Legitimacy Panel</h2>
      </section>
      <section id="sec-outcome" data-section="outcome_label" aria-labelledby="h-outcome">
        <h2 id="h-outcome" class="visually-hidden">Outcome / Label</h2>
      </section>
      <!-- Optional map panel (only shown when a FrontierMap exists).
           data-map-style points to LOCAL style.json (no remote tiles). -->
      <section id="sec-frontier" data-section="frontier" aria-labelledby="h-frontier" hidden>
        <h2 id="h-frontier" class="visually-hidden">Frontier Map</h2>
        <div id="map"
             data-map-style="./maps/style.json"
             style="width:100%;height:420px"
             role="img"
             aria-label="Frontier map (offline)">
        </div>
      </section>
      <section id="sec-ties" data-section="ties" aria-labelledby="h-ties">
        <h2 id="h-ties" class="visually-hidden">Tie Resolution</h2>
      </section>
      <section id="sec-sensitivity" data-section="sensitivity" aria-labelledby="h-sensitivity">
        <h2 id="h-sensitivity" class="visually-hidden">Sensitivity</h2>
      </section>
      <section id="sec-integrity" data-section="integrity" aria-labelledby="h-integrity">
        <h2 id="h-integrity" class="visually-hidden">Integrity & Reproducibility</h2>
      </section>
      <footer id="fixed-footer" data-section="footer" aria-label="Fixed footer">
        <!-- Renderer writes fixed footer line with IDs from RunRecord/Result -->
      </footer>
    </div>
    <!-- Production bundle (generated by Vite). Keep relative path; no external scripts. -->
    <script type="module" src="./assets/main.js"></script>
  </body>
</html>

--------------------------------------------------------------------------------
FILE: crates/vm_app/ui/vite.config.ts
--------------------------------------------------------------------------------
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta
      http-equiv="Content-Security-Policy"
      content="
        default-src 'self' asset: tauri: ipc:;
        img-src 'self' asset: data: blob:;
        style-src 'self' 'unsafe-inline';
        font-src 'self' asset: data:;
        script-src 'self';
        connect-src 'self' asset: tauri: ipc:;
        object-src 'none';
        frame-ancestors 'none';
      ">
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
    <meta name="color-scheme" content="light dark">
    <title>VM Engine — Report Viewer</title>
    <!-- Local, bundled stylesheet (no external fonts or CDNs) -->
    <link rel="stylesheet" href="./assets/app.css">
  </head>
  <body>
    <noscript>
      This application requires JavaScript (offline, no network). Please enable it to view reports.
    </noscript>
    <!-- App root -->
    <div id="app" role="main" aria-live="polite">
      <!-- Section anchors in Doc 7 order; content injected by bundled JS from artifacts -->
      <section id="sec-cover-snapshot" data-section="cover_snapshot" aria-labelledby="h-cover">
        <h1 id="h-cover" class="visually-hidden">Cover & Snapshot</h1>
      </section>
      <section id="sec-eligibility" data-section="eligibility" aria-labelledby="h-eligibility">
        <h2 id="h-eligibility" class="visually-hidden">Eligibility & Rolls</h2>
      </section>
      <section id="sec-ballot" data-section="ballot" aria-labelledby="h-ballot">
        <h2 id="h-ballot" class="visually-hidden">Ballot Method</h2>
      </section>
      <section id="sec-allocation" data-section="allocation" aria-labelledby="h-allocation">
        <h2 id="h-allocation" class="visually-hidden">Allocation & Aggregation</h2>
      </section>
      <section id="sec-legitimacy" data-section="legitimacy_panel" aria-labelledby="h-legitimacy">
        <h2 id="h-legitimacy" class="visually-hidden">Legitimacy Panel</h2>
      </section>
      <section id="sec-outcome" data-section="outcome_label" aria-labelledby="h-outcome">
        <h2 id="h-outcome" class="visually-hidden">Outcome / Label</h2>
      </section>
      <!-- Optional map panel (only shown when a FrontierMap exists).
           data-map-style points to LOCAL style.json (no remote tiles). -->
      <section id="sec-frontier" data-section="frontier" aria-labelledby="h-frontier" hidden>
        <h2 id="h-frontier" class="visually-hidden">Frontier Map</h2>
        <div id="map"
             data-map-style="./maps/style.json"
             style="width:100%;height:420px"
             role="img"
             aria-label="Frontier map (offline)">
        </div>
      </section>
      <section id="sec-ties" data-section="ties" aria-labelledby="h-ties">
        <h2 id="h-ties" class="visually-hidden">Tie Resolution</h2>
      </section>
      <section id="sec-sensitivity" data-section="sensitivity" aria-labelledby="h-sensitivity">
        <h2 id="h-sensitivity" class="visually-hidden">Sensitivity</h2>
      </section>
      <section id="sec-integrity" data-section="integrity" aria-labelledby="h-integrity">
        <h2 id="h-integrity" class="visually-hidden">Integrity & Reproducibility</h2>
      </section>
      <footer id="fixed-footer" data-section="footer" aria-label="Fixed footer">
        <!-- Renderer writes fixed footer line with IDs from RunRecord/Result -->
      </footer>
    </div>
    <!-- Production bundle (generated by Vite). Keep relative path; no external scripts. -->
    <script type="module" src="./assets/main.js"></script>
  </body>
</html>

--------------------------------------------------------------------------------
FILE: crates/vm_app/ui/src/main.ts
--------------------------------------------------------------------------------
/* crates/vm_app/ui/src/main.ts
 * Offline UI bootstrap & renderer (no network, no outcome math).
 */
import { invoke } from '@tauri-apps/api/tauri';
import { readTextFile } from '@tauri-apps/api/fs';
import { join } from '@tauri-apps/api/path';

/* ===== Minimal types (subset—align with backend 81/89) ===== */
type EngineInfo = { formula_id: string; engine_version: string; targets: string[] };

type LoadedContextSummary = {
  registry_id: string;
  ballot_or_tally_id: string;
  parameter_set_id: string;
  has_adjacency: boolean;
};

type RunSummary = {
  result_id: string;
  run_id: string;
  frontier_id?: string | null;
  label: 'Decisive' | 'Marginal' | 'Invalid';
};

type ResultDb = {
  id: string;
  label: { label: 'Decisive' | 'Marginal' | 'Invalid'; reason?: string };
  gates?: any;         // Legitimacy panel payloads (UI treats as opaque)
  snapshot?: any;      // optional snapshot block
  meta?: any;          // optional misc
};

type RunRecordDb = {
  id: string;
  engine: { formula_id: string; version: string };
  inputs: { registry_id: string; parameter_set_id: string; ballot_tally_id?: string };
  determinism?: { rng_seed?: string | null };
  timestamps: { started_utc: string; finished_utc: string };
};

type FrontierMapDb = {
  id: string;
  summary?: {
    by_status?: Record<string, number>;
    flags?: { mediation: number; enclave: number; protected_blocked: number; quorum_blocked: number };
  };
  units?: Record<string, unknown>;
};

/* ===== Bootstrap ===== */
async function bootstrap(): Promise<void> {
  const root = document.getElementById('app');
  if (!root) throw new Error('#app not found');

  // Engine info (provenance)
  try {
    const info = await invoke<EngineInfo>('cmd_engine_info');
    setText('#engine-ident', `${info.formula_id} • ${info.engine_version}`);
  } catch (err) {
    showError('Failed to get engine info', err);
  }

  // Wire demo buttons (IDs are optional; no-op if missing)
  bind('#btn-run', async () => {
    clearError();
    try {
      // Collect paths from inputs (all local)
      const registry = getValue('#in-registry');
      const ballots_or_tally = getValue('#in-ballots') || getValue('#in-tally');
      const params = getValue('#in-params');
      const manifest = getValue('#in-manifest') || undefined;
      const outDir = getValue('#in-out') || '.';

      if (!registry || !params || !ballots_or_tally) {
        throw new Error('Missing required paths (registry, params, and ballots/tally).');
      }

      const run = await runPipeline({ registry, ballots_or_tally, params, manifest }, outDir);

      // The backend writes canonical JSON into outDir; compute paths deterministically.
      const resultPath = await join(outDir, 'result.json');
      const runPath = await join(outDir, 'run_record.json');
      const frontierPath = await join(outDir, 'frontier_map.json');

      // Read artifacts (from local disk; canonical JSON)
      const res = await readArtifact<ResultDb>(resultPath);
      const rr = await readArtifact<RunRecordDb>(runPath);
      // Frontier is optional; try to read but tolerate absence.
      const fr = await readArtifact<FrontierMapDb>(frontierPath).catch(() => null as FrontierMapDb | null);

      renderReport(res, rr, fr ?? undefined);
      setText('#last-run', `Result ${run.result_id} • Run ${run.run_id} • ${run.label}`);
    } catch (err) {
      showError('Pipeline failed', err);
    }
  });

  bind('#btn-open', async () => {
    clearError();
    try {
      const resPath = getValue('#in-result');
      const runPath = getValue('#in-runrecord');
      if (!resPath || !runPath) throw new Error('Select both Result and RunRecord paths');
      const res = await readArtifact<ResultDb>(resPath);
      const rr = await readArtifact<RunRecordDb>(runPath);
      // Optional FrontierMap path input
      const frPath = getValue('#in-frontier');
      const fr = frPath ? await readArtifact<FrontierMapDb>(frPath).catch(() => null as FrontierMapDb | null) : null;
      renderReport(res, rr, fr ?? undefined);
      setText('#last-run', `Loaded ${res.id} / ${rr.id}`);
    } catch (err) {
      showError('Open artifacts failed', err);
    }
  });
}

/* ===== Backend IPC wrappers ===== */
async function loadBundle(paths: {
  registry?: string;
  ballots_or_tally?: string;
  params?: string;
  manifest?: string;
}): Promise<LoadedContextSummary> {
  return invoke<LoadedContextSummary>('cmd_load_inputs', paths);
}

async function runPipeline(
  paths: { registry?: string; ballots_or_tally?: string; params?: string; manifest?: string },
  outDir: string
): Promise<RunSummary> {
  return invoke<RunSummary>('cmd_run_pipeline', { ...paths, out_dir: outDir });
}

/* Local JSON read (scoped by tauri.conf.json fs scope) */
async function readArtifact<T>(path: string): Promise<T> {
  const txt = await readTextFile(path);
  return JSON.parse(txt) as T;
}

/* ===== Rendering (Doc 7 order; presentation-only) ===== */
function renderReport(result: ResultDb, run: RunRecordDb, frontier?: FrontierMapDb): void {
  // 1) Cover & Snapshot
  setText('#cover-label', `${result.label.label}`);
  setText('#cover-reason', result.label.reason ?? '');
  setText('#snapshot-engine', `${run.engine.formula_id} • ${run.engine.version}`);
  setText('#snapshot-runid', run.id);
  setText('#snapshot-seed', run.determinism?.rng_seed ? `Seed ${run.determinism.rng_seed}` : 'Seed — n/a');

  // 2) Eligibility & Rolls (values come from artifacts—do not recompute)
  setText('#eligibility-policy', getSafePath(result, ['snapshot', 'eligibility_policy']) ?? '—');

  // 3) Ballot (method paragraph)
  const ballotType = getSafePath(result, ['snapshot', 'ballot_type']);
  setText('#ballot-type', ballotType ?? '—');
  const approvalSentenceNeeded = ballotType === 'approval';
  setVisible('#approval-denominator-note', !!approvalSentenceNeeded);

  // 4) Legitimacy Panel (raw numbers copied; UI does not recompute)
  const panel = result.gates ?? {};
  setText('#gate-quorum', renderGate(panel.quorum));
  setText('#gate-majority', renderGate(panel.majority));
  setText('#gate-double', renderGate(panel.double_majority));
  setText('#gate-symmetry', renderGate(panel.symmetry));

  // 5) Outcome / Label
  setText('#outcome-label', result.label.label);
  setText('#outcome-reason', result.label.reason ?? '');

  // 6) Frontier (only if artifact exists)
  if (frontier) {
    setVisible('#sec-frontier', true);
    const f = frontier.summary?.flags ?? { mediation: 0, enclave: 0, protected_blocked: 0, quorum_blocked: 0 };
    setText(
      '#frontier-flags',
      `Mediation ${f.mediation} • Enclave ${f.enclave} • Protected ${f.protected_blocked} • Quorum-blocked ${f.quorum_blocked}`
    );
    // Optional map (uses local style; leave empty if assets absent)
    initMap('map', './maps/style.json'); // must be packaged locally
  } else {
    setVisible('#sec-frontier', false);
  }

  // 7) Sensitivity (UI shows "N/A" unless compare scenarios included in Result)
  const sens = getSafePath(result, ['snapshot', 'sensitivity']) ?? 'N/A (not executed)';
  setText('#sensitivity', String(sens));

  // 8) Integrity & Reproducibility (IDs/UTC only)
  setText('#integrity-result-id', result.id);
  setText('#integrity-run-id', run.id);
  setText('#integrity-start', run.timestamps.started_utc);
  setText('#integrity-finish', run.timestamps.finished_utc);
}

/* Render a single gate row from payload already computed upstream. */
function renderGate(g: any): string {
  if (!g) return '—';
  // Prefer preformatted strings if present; otherwise display compact raw.
  const pct = g.support_pct_str ?? g.turnout_pct_str ?? '';
  const thr = g.threshold_str ?? '';
  const pass = g.pass === true ? 'Pass' : (g.pass === false ? 'Fail' : '—');
  return [pct && `Value ${pct}`, thr && `vs ${thr}`, pass].filter(Boolean).join(' — ');
}

/* ===== Formatting helpers (display only; integer math) ===== */
/** One-decimal percent string using integers (round half up). */
export function formatPercent(numer: bigint, denom: bigint): string {
  if (denom === 0n) return '0.0%';
  const scaled = numer * 1000n;                  // percent*10
  const tenths = (scaled + denom / 2n) / denom;  // rounded to nearest tenth
  const whole = tenths / 10n;
  const dec = tenths % 10n;
  return `${whole}.${dec}%`;
}

/* ===== Map (optional; local assets only) ===== */
function initMap(containerId: string, styleUrl: string): void {
  const el = document.getElementById(containerId);
  if (!el) return;
  // Expect a locally-bundled MapLibre GL (no CDN). If absent, hide panel.
  const gl = (window as any).maplibregl;
  if (!gl) { setVisible('#sec-frontier', false); return; }
  try {
    // @ts-ignore minimal init; styleUrl must point to a local packaged file
    const map = new gl.Map({
      container: containerId,
      style: styleUrl,
      attributionControl: false,
      interactive: false
    });
    map.on('error', () => { /* keep silent; assets may be intentionally absent */ });
  } catch {
    setVisible('#sec-frontier', false);
  }
}

/* ===== Tiny DOM utilities ===== */
function bind(sel: string, fn: () => void) {
  const el = document.querySelector<HTMLButtonElement>(sel);
  if (el) el.addEventListener('click', fn);
}
function setText(sel: string, txt: string) {
  const el = typeof sel === 'string' ? document.querySelector<HTMLElement>(sel) : null;
  if (el) el.textContent = txt ?? '';
}
function setVisible(sel: string, on: boolean) {
  const el = document.querySelector<HTMLElement>(sel);
  if (el) el.style.display = on ? '' : 'none';
}
function getValue(sel: string): string {
  const el = document.querySelector<HTMLInputElement>(sel);
  return (el?.value ?? '').trim();
}
function showError(msg: string, err: unknown) {
  const box = document.getElementById('error');
  if (!box) return;
  const detail = (err as any)?.message ?? String(err ?? '');
  box.textContent = `${msg}: ${detail}`;
  box.style.display = '';
}
function clearError() {
  const box = document.getElementById('error');
  if (box) box.style.display = 'none';
}
/* Safe nested getter without recomputation */
function getSafePath(o: any, path: Array<string | number>): any {
  return path.reduce((acc, k) => (acc && k in acc ? acc[k] : undefined), o);
}

/* ===== Kick it off ===== */
document.addEventListener('DOMContentLoaded', () => {
  bootstrap().catch(err => showError('Bootstrap failed', err));
});

--------------------------------------------------------------------------------
FILE: crates/vm_app/ui/public/map/style.json
--------------------------------------------------------------------------------
{
  "version": 8,
  "name": "VM Offline Frontier",
  "sprite": "./sprites/sprite",
  "glyphs": "./fonts/{fontstack}/{range}.pbf",
  "sources": {
    "basemap": {
      "type": "raster",
      "tiles": ["./tiles/raster/{z}/{x}/{y}.png"],
      "tileSize": 256,
      "minzoom": 0,
      "maxzoom": 6
    },
    "units": {
      "type": "geojson",
      "data": "./data/units.geojson"
    },
    "frontier": {
      "type": "geojson",
      "data": "./data/frontier.geojson"
    },
    "adjacency": {
      "type": "geojson",
      "data": "./data/adjacency.geojson"
    }
  },
  "layers": [
    {
      "id": "background",
      "type": "background",
      "paint": {
        "background-color": "#eef2f5"
      }
    },
    {
      "id": "basemap",
      "type": "raster",
      "source": "basemap",
      "minzoom": 0,
      "maxzoom": 6,
      "paint": {
        "raster-opacity": 0.8
      }
    },
    {
      "id": "units-fill",
      "type": "fill",
      "source": "units",
      "paint": {
        "fill-color": [
          "match",
          ["get", "status"],
          "no_change",
          "#B0BEC5",
          "autonomy",
          "#4CAF50",
          "phased",
          "#FFC107",
          "immediate",
          "#F44336",
          "#B0BEC5"
        ],
        "fill-opacity": 0.6
      }
    },
    {
      "id": "units-outline",
      "type": "line",
      "source": "units",
      "paint": {
        "line-color": "#607D8B",
        "line-width": 0.5
      }
    },
    {
      "id": "frontier-mediation",
      "type": "fill",
      "source": "frontier",
      "filter": ["==", ["get", "mediation"], true],
      "paint": {
        "fill-color": "#FF9800",
        "fill-opacity": 0.35
      }
    },
    {
      "id": "frontier-enclave-outline",
      "type": "line",
      "source": "frontier",
      "filter": ["==", ["get", "enclave"], true],
      "paint": {
        "line-color": "#000000",
        "line-width": 1.0,
        "line-dasharray": [2, 2]
      }
    },
    {
      "id": "frontier-override-protected",
      "type": "line",
      "source": "frontier",
      "filter": ["==", ["get", "protected_blocked"], true],
      "paint": {
        "line-color": "#673AB7",
        "line-width": 2.0,
        "line-dasharray": [2, 2]
      }
    },
    {
      "id": "adjacency-land",
      "type": "line",
      "source": "adjacency",
      "filter": ["==", ["get", "edge_type"], "land"],
      "paint": {
        "line-color": "#9E9E9E",
        "line-width": 1.0
      }
    },
    {
      "id": "adjacency-bridge",
      "type": "line",
      "source": "adjacency",
      "filter": ["==", ["get", "edge_type"], "bridge"],
      "paint": {
        "line-color": "#616161",
        "line-width": 1.0,
        "line-dasharray": [3, 2]
      }
    },
    {
      "id": "adjacency-water",
      "type": "line",
      "source": "adjacency",
      "filter": ["==", ["get", "edge_type"], "water"],
      "paint": {
        "line-color": "#90CAF9",
        "line-width": 1.0,
        "line-opacity": 0.6
      }
    },
    {
      "id": "unit-labels",
      "type": "symbol",
      "source": "units",
      "layout": {
        "text-field": [
          "coalesce",
          ["get", "name"],
          ["get", "id"]
        ],
        "text-font": ["Inter Regular", "Noto Sans Regular", "Arial Unicode MS Regular"],
        "text-size": 12,
        "text-allow-overlap": false,
        "text-anchor": "center",
        "text-offset": [0, 0]
      },
      "paint": {
        "text-color": "#263238",
        "text-halo-color": "#ffffff",
        "text-halo-width": 1.0
      }
    }
  ]
}
